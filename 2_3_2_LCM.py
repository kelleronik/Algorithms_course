# Программа для поиска наименьшего общего кратного (НОК)
# Вход: пара чисел (два числа)
# Выход: НОК пары чисел (число)

# Функция вычисления НОД
# Основана на алгоритме Эвклида и лемме о том, что НОД пары чисел и целочисленного остатка от деления одного числа на другое - один и тот же. При a>=b>0 и r - остатке от деления a на b:
# НОД(a, b) = НОД(r, b) - НОД(a - b, b)
def gcd(a, b):
    mini = min(a, b)                    # минимальное число из пары входных
    maxi = max(a, b)                    # минимальное число из пары входных
    while (mini > 0):                   # пока наименьшее число не занулилось
        ost = maxi%mini                 # находим целочисленный остаток от деления большего числа на меньшее (он будет меньше меньшего)
        maxi = mini                     # обновляем большее значение
        mini = ost                      # обновляем меньшее значение
    return maxi

# Функция вычисляет НОК, требует наличия НОД
def lcm(a, b):
    grand_dev = gcd(a, b)
    return int(a*b/grand_dev)           # НОК вычисляется как произведение чисел, деленное на НОД. Фактически посредством деления на НОД мы убираем все общие множители чисел a и b
                                        # оставляя лишь их уникальные (не повторяющиеся) множители

def main():
    a, b = map(int, input().split())
    print("LCM =", lcm(a, b))


if __name__ == "__main__":
    main()