# Программа для нахождения целоцисленного остатка от деления n-того числа Фибоначчи на m
# Вход: номер числа Фибоначчи (число) и произвольный делитель (число)
# Выход: остаток от деления n-того числа Фибоначчи на m (число)

# Для решения задачи в первую очередь необходимо вычислить период Пизано для m (дело в том, что остатки от деления чисел Фибоначчи
# на произвольное число m периодически повторяются
# Поэтому функция будет работать не с самими числами Фибоначчи, а с остатками от деления этих чисел на m
def fib_mod(n, m):
    fibPrev = 0                         # задаем предыдущее число Фибооначчи
    fib = 1                             # задаем текущее число Фибооначчи
    cached = [fibPrev, fib]             # задаем список с остатками, который всегда начинается [0, 1]

    for curr in range(1, n):            # перебираем индексы вплоть до номера числа (вылетим из цикла раньше)
        fibOld = fib                    # вспомогательная переменная для хранения числа (фактически здесь хранится остаток от деления предыдущего числа на m)
        fib = (fib + fibPrev) % m       # остаток от деления нового числа Фибоначчи на m (фактически здесь хранится остаток от деления нового числа на m)
        fibPrev = fibOld                # обновляем предыдущее число (фактически здесь хранится остаток от деления предыдущего числа на m)

        if fibPrev == 0 and fib == 1:   # если встретили комбинацию [0, 1], значит период найден
            cached.pop()                # удаляем два лишний элемент [0]
            break                       # досрочно прерываем цикл
        else:                           # если не встретили комбинацию [0, 1]
            cached.append(fib)          # добавляем остаток в список

    offset = n % len(cached)            # находим остаток от деления номера числа Фибоначчи на длину периода - это будет индексом искомого остатка в списке периода
    return cached[offset]               # возвращаем результат - элемент списка с нужным индексом


def main():
    n, m = map(int, input().split())
    print(fib_mod(n, m))


if __name__ == "__main__":
    main()